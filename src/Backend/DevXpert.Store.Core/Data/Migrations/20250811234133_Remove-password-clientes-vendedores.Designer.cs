// <auto-generated />
using System;
using DevXpert.Store.Core.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevXpert.Store.Core.data.migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250811234133_Remove-password-clientes-vendedores")]
    partial class Removepasswordclientesvendedores
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AI")
                .HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_NOME_CATEGORIA")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.ToTable("CATEGORIAS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ce8ce71-e766-41ee-839a-f0824f7fd3b8"),
                            Ativo = true,
                            Descricao = "Categoria destinada a vestuário",
                            Nome = "Vestuário"
                        },
                        new
                        {
                            Id = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Ativo = true,
                            Descricao = "Eletrônicos e eletrodomésticos",
                            Nome = "Eletrônicos"
                        },
                        new
                        {
                            Id = new Guid("63cb29c3-db97-4744-b01d-def53fc1cccb"),
                            Ativo = false,
                            Descricao = "Comidas em geral",
                            Nome = "Alimentação"
                        });
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_CLIENTE_EMAIL")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_CLIENTE_NOME")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.ToTable("CLIENTES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257c"),
                            Ativo = true,
                            Email = "cliente@teste.com",
                            Nome = "cliente@teste.com"
                        });
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Favorito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("ClienteId", "ProdutoId")
                        .IsUnique()
                        .HasDatabaseName("UQ_FAVORITO_CLIENTEID_PRODUTOID")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.ToTable("FAVORITOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f5c5026-518c-4ea2-abe5-8934920d1a27"),
                            ClienteId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257c"),
                            ProdutoId = new Guid("f5dd84d8-ccda-43e8-96cf-be0ccff0de3b")
                        },
                        new
                        {
                            Id = new Guid("115a7dde-7803-4836-9799-49046e1d7fb1"),
                            ClienteId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257c"),
                            ProdutoId = new Guid("5fa99536-a7c8-403d-a0a0-373f30773054")
                        },
                        new
                        {
                            Id = new Guid("4f45533c-1f36-46e5-acdb-fbb7e56254ac"),
                            ClienteId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257c"),
                            ProdutoId = new Guid("26361398-ab18-4efd-879f-1f0ad1bb6d9e")
                        },
                        new
                        {
                            Id = new Guid("099cb44e-44d8-45f2-960c-47139b38bc52"),
                            ClienteId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257c"),
                            ProdutoId = new Guid("6fa552cd-bdbf-4f4d-b298-987c3a140275")
                        });
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.Property<int>("Estoque")
                        .HasColumnType("INT");

                    b.Property<string>("Imagem")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_PRODUTO_NOME")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.HasIndex("VendedorId");

                    b.HasIndex("Nome", "VendedorId")
                        .IsUnique()
                        .HasDatabaseName("UQ_PRODUTO_NOME_VENDEDORID")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.HasIndex("Nome", "CategoriaId", "VendedorId")
                        .IsUnique()
                        .HasDatabaseName("UQ_PRODUTO_NOME_CATEGORIAID_VENDEDORID")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.ToTable("PRODUTOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5dd84d8-ccda-43e8-96cf-be0ccff0de3b"),
                            Ativo = true,
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "Personal Computer",
                            Estoque = 100,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Computador",
                            Preco = 5000m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        },
                        new
                        {
                            Id = new Guid("5fa99536-a7c8-403d-a0a0-373f30773054"),
                            Ativo = true,
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "mouse com fio",
                            Estoque = 20,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Mouse",
                            Preco = 60m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        },
                        new
                        {
                            Id = new Guid("26361398-ab18-4efd-879f-1f0ad1bb6d9e"),
                            Ativo = true,
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "teclado mecânico",
                            Estoque = 15,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Teclado",
                            Preco = 100m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        },
                        new
                        {
                            Id = new Guid("6fa552cd-bdbf-4f4d-b298-987c3a140275"),
                            Ativo = false,
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "Monitor curso 27",
                            Estoque = 28,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Monitor",
                            Preco = 780m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        });
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_VENDEDOR_EMAIL")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_VENDEDOR_NOME")
                        .HasAnnotation("SqlServer:FillFactor", 80);

                    b.ToTable("VENDEDORES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d"),
                            Ativo = true,
                            Email = "vendedor@teste.com",
                            Nome = "vendedor@teste.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "16aacd76-5c6d-418a-884c-116871ca2fe0",
                            Name = "Vendedor",
                            NormalizedName = "VENDEDOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "bd1f5f5b-77e4-4ac3-b101-1f3053f4ee6c",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f96e5735-7f8a-49a7-8fe1-64304e70257d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1aef7e9-db61-4442-a01a-ea58d7609d21",
                            Email = "vendedor@teste.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "VENDEDOR@TESTE.COM",
                            NormalizedUserName = "VENDEDOR@TESTE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1kPW44o68VpBeoDRUByh20VsgylM2MkdGJ9kzepRkS0wkgOqDnahg5xEkN++ogbg ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdb857cc-1f49-484f-bd6b-bfbba7fedfab",
                            TwoFactorEnabled = false,
                            UserName = "vendedor@teste.com"
                        },
                        new
                        {
                            Id = "f96e5735-7f8a-49a7-8fe1-64304e70257c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1aef7e9-db61-4442-a01a-ea58d7609d21",
                            Email = "cliente@teste.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CLIENTE@TESTE.COM",
                            NormalizedUserName = "CLIENTE@TESTE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1kPW44o68VpBeoDRUByh20VsgylM2MkdGJ9kzepRkS0wkgOqDnahg5xEkN++ogbg ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdb857cc-1f49-484f-bd6b-bfbba7fedfab",
                            TwoFactorEnabled = false,
                            UserName = "cliente@teste.com"
                        },
                        new
                        {
                            Id = "f96e5735-7f8a-49a7-8fe1-64304e70257b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1aef7e9-db61-4442-a01a-ea58d7609d21",
                            Email = "admin@teste.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@TESTE.COM",
                            NormalizedUserName = "ADMIN@TESTE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB1kPW44o68VpBeoDRUByh20VsgylM2MkdGJ9kzepRkS0wkgOqDnahg5xEkN++ogbg ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdb857cc-1f49-484f-bd6b-bfbba7fedfab",
                            TwoFactorEnabled = false,
                            UserName = "admin@teste.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f96e5735-7f8a-49a7-8fe1-64304e70257b",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "f96e5735-7f8a-49a7-8fe1-64304e70257d",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "f96e5735-7f8a-49a7-8fe1-64304e70257c",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Favorito", b =>
                {
                    b.HasOne("DevXpert.Store.Core.Business.Models.Cliente", "Cliente")
                        .WithMany("Favoritos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevXpert.Store.Core.Business.Models.Produto", "Produto")
                        .WithMany("Favoritos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Produto", b =>
                {
                    b.HasOne("DevXpert.Store.Core.Business.Models.Categoria", "Categoria")
                        .WithMany("Produto")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUTO_CATEGORIAID");

                    b.HasOne("DevXpert.Store.Core.Business.Models.Vendedor", "Vendedor")
                        .WithMany("Produto")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUTO_VENDEDORID");

                    b.Navigation("Categoria");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Categoria", b =>
                {
                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Cliente", b =>
                {
                    b.Navigation("Favoritos");
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Produto", b =>
                {
                    b.Navigation("Favoritos");
                });

            modelBuilder.Entity("DevXpert.Store.Core.Business.Models.Vendedor", b =>
                {
                    b.Navigation("Produto");
                });
#pragma warning restore 612, 618
        }
    }
}
